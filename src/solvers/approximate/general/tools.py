#!/bin/python3

'''tools.py

- Author: Jeremy Perez
- Course: CSC 489, Fall 2024
- Date: 10/6/24

Contains helpful tools for Approximation algorithms
 
'''
class Graph:
    def __init__(self, vertices, edges, weights):
        self.V = vertices.copy()
        self.E = edges.copy()

        self.W = weights.copy()
        self.N = max(weights.values())

        self.n = len(self.V)
        self.m = len(self.E)


def getOddSubsets(l):
    """Generates all odd subsets of a list

    ## GENERATED BY GOOGLE SEARCH AI

    Args:
        l (list): List of items
    
    Returns:
        list: List of all tuples with odd number of elements 
    """

    def backtrack(index, subset):
        if index == len(l):
            if len(subset) % 2 == 1:
                result.append(subset[:])
            return

        # Include the current element
        subset.append(l[index])
        backtrack(index + 1, subset)

        # Exclude the current element
        subset.pop()
        backtrack(index + 1, subset)

    result = []
    backtrack(0, [])
    return result

def set_cover(X, S):
    """Finds the Minimum Set cover

    Refer to https://www.tutorialspoint.com/data_structures_algorithms/dsa_set_cover_problem.htm
    
    Args:
        X (list): Elements/Universe
        S (list): Subsets of X

    Returns:
        list: Minimum ammount of list required to cover X
    """

    U = set(X)
    output = []
    while U:
        max_intersection_size = 0
        selected_set_idx = -1
        for i, s in enumerate(S):
            intersection_size = len(U.intersection(s))
            if intersection_size > max_intersection_size:
                max_intersection_size = intersection_size
                selected_set_idx = i
        if selected_set_idx == -1:
            break
        U = U - set(S[selected_set_idx])
        output.append(selected_set_idx)
    return output
